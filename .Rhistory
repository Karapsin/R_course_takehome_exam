)%>%
arrange(id, time_open)%>%
mutate(day_num = row_number())%>%
mutate(last_day_num = max(day_num))%>%
mutate(log_return = close%>%
`/`(lag(close, 1))%>%
log(),
last_prediction_day = last_day_num/2
)%>%
filter(!is.na(log_return))%>%
ungroup()%>%
select(-close)%>%
mutate(log_returns_for_arima = ifelse(day_num <= last_prediction_day, log_return, NA))
# expanding window, auto.arima on every step
predictions_df <- tibble(id = numeric(), day_num = numeric(), predicted_log_return = numeric())
while(TRUE){
rows_left <- df%>%filter(day_num > last_prediction_day)%>%nrow()
if(rows_left == 0){break}
print(paste0("rows left: ", rows_left))
current_predictions <-
df%>%
filter(day_num < last_prediction_day + 1)%>%
group_by(id)%>%
summarise(day_num = max(day_num) + 1,
predicted_log_return = log_returns_for_arima%>%
auto.arima()%>%
forecast(h = 1)%$%
mean
)%>%
ungroup()
predictions_df%<>%rbind(current_predictions)
df%<>%
mutate(last_prediction_day = ifelse(id %in% current_predictions$id, last_prediction_day + 1, last_prediction_day))%>%
left_join(current_predictions, by = c("day_num"="day_num", "id"="id"))%>%
mutate(log_returns_for_arima = coalesce(log_returns_for_arima, predicted_log_return))%>%
select(-predicted_log_return)
}
t <-
intervals_df%>%
filter(id == 22)
actual <- t$log_return
VaR <- t$intervals_AgACI1[,1]
actual
t <-
intervals_df%>%
filter(id == 22)
rm(list = ls())
library(magrittr)
library(purrr)
library(forecast)
library(dplyr)
library(AdaptiveConformal)
df <- readRDS("data_with_predictions.rds")
intervals_df <-
df%>%
filter(!is.na(predicted_log_return))%>%
group_by(id)%>%
summarise(
###################################################################################################################
# alpha 5%
intervals_AgACI5 = aci(method = "AgACI")%>%
update(newY = log_return, newpredictions = predicted_log_return)%$%
intervals,
# no FACI in the package :(
intervals_dtACI5 = aci(method = "DtACI")%>%
update(newY = log_return, newpredictions = predicted_log_return)%$%
intervals,
intervals_SF_OGD5 = aci(method = "SF-OGD")%>%
update(newY = log_return,
newpredictions = predicted_log_return,
parameters=list(gamma = max(abs(log_return-predicted_log_return))/sqrt(3))
)%$%
intervals,
intervals_SAOCP5 = aci(method = "SAOCP")%>%
update(newY = log_return,
newpredictions = predicted_log_return,
parameters=list(D = max(abs(log_return-predicted_log_return))/sqrt(3))
)%$%
intervals,
###################################################################################################################
# alpha 1%
intervals_AgACI1 = aci(method = "AgACI", alpha = 0.99)%>%
update(newY = log_return, newpredictions = predicted_log_return)%$%
intervals,
# no FACI in the package :(
intervals_dtACI1 = aci(method = "DtACI", alpha = 0.99)%>%
update(newY = log_return, newpredictions = predicted_log_return)%$%
intervals,
intervals_SF_OGD1 = aci(method = "SF-OGD", alpha = 0.99)%>%
update(newY = log_return,
newpredictions = predicted_log_return,
parameters=list(gamma = max(abs(log_return-predicted_log_return))/sqrt(3))
)%$%
intervals,
intervals_SAOCP1 = aci(method = "SAOCP", alpha = 0.99)%>%
update(newY = log_return,
newpredictions = predicted_log_return,
parameters=list(D = max(abs(log_return-predicted_log_return))/sqrt(3))
)%$%
intervals
)
# we can do that since the order of days is preserved
intervals_df$day_num <- df%>%filter(!is.na(predicted_log_return))%$%day_num
intervals_df$log_return <- df%>%filter(!is.na(predicted_log_return))%$%log_return
saveRDS(df, "VaR_data.rds")
get_full_report_for_id <- function(id_df){
print(id_df)
print("---------------------------------------------------------")
print("#########################################################")
print(paste0("REPORT START FOR id ", id_df$id%>%unique()))
print("#########################################################")
print("AgACI result:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_AgACI1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_AgACI5[,1])
print("---------------------------------------------------------")
print("DtACI:")
print("0.5% backtests:")
print_test_resuls(id_df, 0.01, id_df$intervals_dtACI1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_dtACI5[,1])
print("---------------------------------------------------------")
print("SF-OGD:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_SF_OGD1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_SF_OGD5[,1])
print("---------------------------------------------------------")
print("SAOCP result:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_SAOCP1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_SAOCP5[,1])
}
get_full_report <- function(intervals_df){
intervals_df%>%
pull(id)%>%
unique()%>%
walk(~intervals_df%>%
filter(id == .x)%>%
get_full_report_for_id()
)
}
# error because for some vars there no values outside of the CI
get_full_report(intervals_df)
print_test_resuls <- function(id_df, alpha, VaR){
res <-
VaRTest(alpha = alpha,
actual=id_df$log_return,
VaR = VaR
)
print(paste0("uc: ", ifelse(res$uc.Decision == "Reject H0", "+", "-"), ";  cc: ", ifelse(res$uc.Decision == "Reject H0", "+", "-")))
}
get_full_report_for_id <- function(id_df){
print(id_df)
print("---------------------------------------------------------")
print("#########################################################")
print(paste0("REPORT START FOR id ", id_df$id%>%unique()))
print("#########################################################")
print("AgACI result:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_AgACI1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_AgACI5[,1])
print("---------------------------------------------------------")
print("DtACI:")
print("0.5% backtests:")
print_test_resuls(id_df, 0.01, id_df$intervals_dtACI1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_dtACI5[,1])
print("---------------------------------------------------------")
print("SF-OGD:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_SF_OGD1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_SF_OGD5[,1])
print("---------------------------------------------------------")
print("SAOCP result:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_SAOCP1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_SAOCP5[,1])
}
get_full_report <- function(intervals_df){
intervals_df%>%
pull(id)%>%
unique()%>%
walk(~intervals_df%>%
filter(id == .x)%>%
get_full_report_for_id()
)
}
# error because for some vars there no values outside of the CI
get_full_report(intervals_df)
t <-
intervals_df%>%
filter(id == 22)
actual <- t$log_return
VaR <- t$intervals_AgACI1[,1]
VaR.ind
VaR <- t$intervals_AgACI1[,1]
actual <- t$log_return
VaR <- t$intervals_AgACI1[,1]
VaR.ind
VaR.ind = as.numeric(ifelse(actual < VaR, 1, 0))
source("~/R_course/final_comps.R", echo=TRUE)
VaR.ind = as.numeric(ifelse(actual < VaR, 1, 0))
actual <- t$log_return
t <-
intervals_df%>%
filter(id == 22)
actual <- t$log_return
t
readRDS("VaR_data.rds")
rm(list = ls())
library(magrittr)
library(purrr)
library(forecast)
library(dplyr)
library(AdaptiveConformal)
df <- readRDS("data_with_predictions.rds")
intervals_df <-
df%>%
filter(!is.na(predicted_log_return))%>%
group_by(id)%>%
summarise(
###################################################################################################################
# alpha 5%
intervals_AgACI5 = aci(method = "AgACI")%>%
update(newY = log_return, newpredictions = predicted_log_return)%$%
intervals,
# no FACI in the package :(
intervals_dtACI5 = aci(method = "DtACI")%>%
update(newY = log_return, newpredictions = predicted_log_return)%$%
intervals,
intervals_SF_OGD5 = aci(method = "SF-OGD")%>%
update(newY = log_return,
newpredictions = predicted_log_return,
parameters=list(gamma = max(abs(log_return-predicted_log_return))/sqrt(3))
)%$%
intervals,
intervals_SAOCP5 = aci(method = "SAOCP")%>%
update(newY = log_return,
newpredictions = predicted_log_return,
parameters=list(D = max(abs(log_return-predicted_log_return))/sqrt(3))
)%$%
intervals,
###################################################################################################################
# alpha 1%
intervals_AgACI1 = aci(method = "AgACI", alpha = 0.99)%>%
update(newY = log_return, newpredictions = predicted_log_return)%$%
intervals,
# no FACI in the package :(
intervals_dtACI1 = aci(method = "DtACI", alpha = 0.99)%>%
update(newY = log_return, newpredictions = predicted_log_return)%$%
intervals,
intervals_SF_OGD1 = aci(method = "SF-OGD", alpha = 0.99)%>%
update(newY = log_return,
newpredictions = predicted_log_return,
parameters=list(gamma = max(abs(log_return-predicted_log_return))/sqrt(3))
)%$%
intervals,
intervals_SAOCP1 = aci(method = "SAOCP", alpha = 0.99)%>%
update(newY = log_return,
newpredictions = predicted_log_return,
parameters=list(D = max(abs(log_return-predicted_log_return))/sqrt(3))
)%$%
intervals
)
# we can do that since the order of days is preserved
intervals_df$day_num <- df%>%filter(!is.na(predicted_log_return))%$%day_num
intervals_df$log_return <- df%>%filter(!is.na(predicted_log_return))%$%log_return
saveRDS(intervals_df, "VaR_data.rds")
readRDS("VaR_data.rds")
print_test_resuls <- function(id_df, alpha, VaR){
res <-
VaRTest(alpha = alpha,
actual=id_df$log_return,
VaR = VaR
)
print(paste0("uc: ", ifelse(res$uc.Decision == "Reject H0", "+", "-"), ";  cc: ", ifelse(res$uc.Decision == "Reject H0", "+", "-")))
}
get_full_report_for_id <- function(id_df){
print(id_df)
print("---------------------------------------------------------")
print("#########################################################")
print(paste0("REPORT START FOR id ", id_df$id%>%unique()))
print("#########################################################")
print("AgACI result:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_AgACI1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_AgACI5[,1])
print("---------------------------------------------------------")
print("DtACI:")
print("0.5% backtests:")
print_test_resuls(id_df, 0.01, id_df$intervals_dtACI1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_dtACI5[,1])
print("---------------------------------------------------------")
print("SF-OGD:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_SF_OGD1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_SF_OGD5[,1])
print("---------------------------------------------------------")
print("SAOCP result:")
print("0.5%:")
print_test_resuls(id_df, 0.01, id_df$intervals_SAOCP1[,1])
print("2.5%:")
print_test_resuls(id_df, 0.05, id_df$intervals_SAOCP5[,1])
}
get_full_report <- function(intervals_df){
intervals_df%>%
pull(id)%>%
unique()%>%
walk(~intervals_df%>%
filter(id == .x)%>%
get_full_report_for_id()
)
}
# error because for some vars there no values outside of the CI
get_full_report(intervals_df)
t <-
intervals_df%>%
filter(id == 22)
actual <- t$log_return
VaR <- t$intervals_AgACI1[,1]
VaR.ind
actual <- t$log_return
VaR <- t$intervals_AgACI1[,1]
VaR.ind = as.numeric(ifelse(actual < VaR, 1, 0))
VaR.ind
N = sum(VaR.ind)
TN = length(VaR.ind)
t <-
intervals_df%>%
filter(id == 26)
actual <- t$log_return
VaR <- t$intervals_AgACI1[,1]
VaR.ind = as.numeric(ifelse(actual < VaR, 1, 0))
VaR.ind
intervals_df <- readRDS("VaR_data.rds")
report_df <- readRDS("report_df.rds")
library(kableExtra)
library(magrittr)
readRDS("report_df.rds")%>%
kable(booktabs = TRUE,
format = "latex",
centering = FALSE,
caption = "estimates, full sample of individuals born in 1990 or later"
)
rm(list = ls())
library(rugarch)
library(dplyr)
library(magrittr)
intervals_df <- readRDS("VaR_data.rds")
get_test_results <- function(id_df, alpha, VaR, col){
res_df <- tibble(.rows = 1)
below_var <- sum(id_df$log_return < VaR)
above_var <- sum(id_df$log_return >= VaR)
check <- above_var == length(VaR)
check2 <- below_var == 1 & (below_var[1] | below_var[length(below_var)])
if(check | check2){
res_df[col] <- "NaN"
}
else{
res <-
VaRTest(alpha = alpha,
actual=id_df$log_return,
VaR = VaR,
conf.level = 1 - alpha
)
uc_reject <- res$uc.Decision == "Reject H0"
cc_reject <- res$cc.Decision == "Reject H0"
test_res <-
case_when(uc_reject & cc_reject ~ "+",
uc_reject ~ "uc",
cc_reject ~ "cc",
TRUE ~ "-"
)
res_df[col] <- test_res
}
res_df
}
get_full_report_for_id <- function(id_df){
res_df <- tibble(.rows = 1)
res_df$id <- unique(id_df$id)
res_df%>%
cbind(get_test_results(id_df, 0.01, id_df$intervals_AgACI1[,1], "0.5_AgACI"))%>%
cbind(get_test_results(id_df, 0.05, id_df$intervals_AgACI5[,1], "2.5_AgACI"))%>%
cbind(get_test_results(id_df, 0.01, id_df$intervals_dtACI1[,1], "0.5_DtACI"))%>%
cbind(get_test_results(id_df, 0.05, id_df$intervals_dtACI5[,1], "2.5_DtACI"))%>%
cbind(get_test_results(id_df, 0.01, id_df$intervals_SF_OGD1[,1], "0.5_SF-OGD"))%>%
cbind(get_test_results(id_df, 0.05, id_df$intervals_SF_OGD5[,1], "2.5_SF-OGD"))%>%
cbind(get_test_results(id_df, 0.01, id_df$intervals_SAOCP1[,1], "0.5_SAOCP"))%>%
cbind(get_test_results(id_df, 0.05, id_df$intervals_SAOCP5[,1], "2.5_SAOCP"))
}
get_full_report <- function(intervals_df){
intervals_df%>%
pull(id)%>%
unique()%>%
map_dfr(~intervals_df%>%
filter(id == .x)%>%
get_full_report_for_id()
)
}
get_full_report(intervals_df)%>%
saveRDS("report_df.rds")
rm(list = ls())
library(rugarch)
library(purrr)
library(dplyr)
library(magrittr)
intervals_df <- readRDS("VaR_data.rds")
get_test_results <- function(id_df, alpha, VaR, col){
res_df <- tibble(.rows = 1)
below_var <- sum(id_df$log_return < VaR)
above_var <- sum(id_df$log_return >= VaR)
check <- above_var == length(VaR)
check2 <- below_var == 1 & (below_var[1] | below_var[length(below_var)])
if(check | check2){
res_df[col] <- "NaN"
}
else{
res <-
VaRTest(alpha = alpha,
actual=id_df$log_return,
VaR = VaR,
conf.level = 1 - alpha
)
uc_reject <- res$uc.Decision == "Reject H0"
cc_reject <- res$cc.Decision == "Reject H0"
test_res <-
case_when(uc_reject & cc_reject ~ "+",
uc_reject ~ "uc",
cc_reject ~ "cc",
TRUE ~ "-"
)
res_df[col] <- test_res
}
res_df
}
get_full_report_for_id <- function(id_df){
res_df <- tibble(.rows = 1)
res_df$id <- unique(id_df$id)
res_df%>%
cbind(get_test_results(id_df, 0.01, id_df$intervals_AgACI1[,1], "0.5_AgACI"))%>%
cbind(get_test_results(id_df, 0.05, id_df$intervals_AgACI5[,1], "2.5_AgACI"))%>%
cbind(get_test_results(id_df, 0.01, id_df$intervals_dtACI1[,1], "0.5_DtACI"))%>%
cbind(get_test_results(id_df, 0.05, id_df$intervals_dtACI5[,1], "2.5_DtACI"))%>%
cbind(get_test_results(id_df, 0.01, id_df$intervals_SF_OGD1[,1], "0.5_SF-OGD"))%>%
cbind(get_test_results(id_df, 0.05, id_df$intervals_SF_OGD5[,1], "2.5_SF-OGD"))%>%
cbind(get_test_results(id_df, 0.01, id_df$intervals_SAOCP1[,1], "0.5_SAOCP"))%>%
cbind(get_test_results(id_df, 0.05, id_df$intervals_SAOCP5[,1], "2.5_SAOCP"))
}
get_full_report <- function(intervals_df){
intervals_df%>%
pull(id)%>%
unique()%>%
map_dfr(~intervals_df%>%
filter(id == .x)%>%
get_full_report_for_id()
)
}
get_full_report(intervals_df)%>%
saveRDS("report_df.rds")
library(kableExtra)
library(magrittr)
readRDS("report_df.rds")%>%
kable(booktabs = TRUE,
format = "latex",
centering = FALSE,
caption = "estimates, full sample of individuals born in 1990 or later"
)
library(kableExtra)
library(magrittr)
readRDS("report_df.rds")%>%
kable()
library(kableExtra)
library(magrittr)
readRDS("report_df.rds")%>%
kable()%>%
kable_styling(font_size = 7)
readRDS("report_df.rds")%>%
kable()%>%
kable_styling(font_size = 12)
library(dplyr)
readRDS("VaR_data.rds")
readRDS("VaR_data.rds")
readRDS("data_with_predictions.rds")
readRDS("VaR_data.rds")
readRDS("VaR_data.rds")%>%select(-log_return)
library(dplyr)
library(purrr)
final_df <-
readRDS("data_with_predictions.rds")%>%
select(id, time_open, day_num, log_return, predicted_log_return)%>%
left_join(readRDS("VaR_data.rds")%>%
select(-log_return),
by = c("id" = "id", "day_num" = "day_num")
)
final_df$id%>%
unique()%>%
map(~final_df%>%
filter(id == .x)
)%>%
saveRDS("final_result.rds")
readRDS("final_result.rds")
t <- readRDS("final_result.rds")[[51]]
t%>%filter(!is.na(predicted_log_return))
